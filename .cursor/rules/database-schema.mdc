---
description: SQLite database schema and data management
---

# Database Schema and Data Management

## SQLite Database: `nms.db`

### Items Table Schema
```sql
CREATE TABLE IF NOT EXISTS items (
    id TEXT PRIMARY KEY,
    title TEXT NOT NULL,
    summary TEXT,
    game_description TEXT,
    source_info TEXT,
    use_info TEXT,
    release_history TEXT,
    additional_info TEXT,
    fishing_info TEXT,
    progression_info TEXT,
    type TEXT,
    group_name TEXT,
    value REAL,                    -- Extracted from infobox.value, converted to float
    infobox TEXT,                  -- JSON stored as TEXT
    categories TEXT,               -- JSON stored as TEXT
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
```

### Recipe Tables Schema (Normalized Design)

#### Refinery Recipes
```sql
CREATE TABLE IF NOT EXISTS refinery_recipes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    recipe_id TEXT UNIQUE,         -- Format: ref_{item_id}_{sequence}
    output_item_id TEXT,           -- Always references items(id)
    time_seconds REAL,
    operation TEXT,                -- Clean operation name (e.g., "Antimatter Bypass")
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (output_item_id) REFERENCES items (id)
)

CREATE TABLE IF NOT EXISTS refinery_ingredients (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    recipe_id TEXT,
    ingredient_item_id TEXT,       -- References items(id) or missing_{name}
    quantity INTEGER,
    FOREIGN KEY (recipe_id) REFERENCES refinery_recipes (recipe_id),
    FOREIGN KEY (ingredient_item_id) REFERENCES items (id)
)
```

#### Cooking Recipes
```sql
CREATE TABLE IF NOT EXISTS cooking_recipes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    recipe_id TEXT UNIQUE,         -- Format: cook_{item_id}_{sequence}
    output_item_id TEXT,           -- Always references items(id)
    time_seconds REAL,
    operation TEXT,                -- Clean operation name (e.g., "Assemble Baked Product")
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (output_item_id) REFERENCES items (id)
)

CREATE TABLE IF NOT EXISTS cooking_ingredients (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    recipe_id TEXT,
    ingredient_item_id TEXT,       -- References items(id) or missing_{name}
    quantity INTEGER,
    FOREIGN KEY (recipe_id) REFERENCES cooking_recipes (recipe_id),
    FOREIGN KEY (ingredient_item_id) REFERENCES items (id)
)
```

## Comprehensive Data Extraction

### Text Content Fields (populate only if present)
- **summary**: Wiki Summary section content (handles spacing variations like `== Summary ==`)
- **game_description**: Official in-game description text (Game description, In-game description)
- **source_info**: How to obtain/acquire the item (Source, How to acquire, Sources sections)
- **use_info**: What the item is used for (Use, Usage, Uses sections)
- **release_history**: When item was added/changed (Release history section)
- **additional_info**: Extra notes, tips, real-world context (Additional information/notes sections)
- **fishing_info**: Fishing bait bonuses if applicable (FishingBait template or Fishing Bait section)
- **progression_info**: Resource upgrade paths (Resource progression section)

### Structured Data Fields
- **value**: Numeric value extracted from infobox and converted to REAL/float
- **infobox**: JSON object with all infobox data (value, rarity, stats, symbol, etc.) stored as TEXT
- **categories**: JSON array of wiki categories (cleaned, no version suffixes) stored as TEXT
- **type**: Item type from infobox
- **group_name**: Classification group (rawMaterials, products, technology, etc.)

## Recipe Parsing Logic

### PoC-Refine Template Format
```
{{PoC-Refine
|Input1,qty;Input2,qty;Input3,qty;OutputQty;Time%Operation
|Input1,qty;Input2,qty;OutputQty;Time%Operation
}}
```

**Example**: `Carbon,50;Sodium Nitrate,5;Chromatic Metal,250;1;300%Antimatter Bypass`
- **Inputs**: Carbon (50), Sodium Nitrate (5), Chromatic Metal (250)
- **Output**: Current page item (1)
- **Time**: 300 seconds
- **Operation**: "Antimatter Bypass" (extracted after %)

### Cook Template Format
```
{{Cook
|Input1,qty;Input2,qty;Input3,qty;OutputQty;Time%Operation
|Input1,qty;Input2,qty;OutputQty;Time%Operation
}}
```

**Example**: `Wailing Batter,1;Ever-burning Jam,1;Cream,1;1;2.5%Assemble Baked Product`
- **Inputs**: Wailing Batter (1), Ever-burning Jam (1), Cream (1)
- **Output**: Current page item (1)
- **Time**: 2.5 seconds
- **Operation**: "Assemble Baked Product" (extracted after %)

## Advanced Filtering System

### Category-Based Filtering
Pages are automatically filtered out based on categories:
- `Category:NPC` - NPCs and merchants
- `Category:Flora` - Plant species
- `Category:Fauna` - Animal species
- `Category:Minerals` - Location-specific minerals
- `Category:Album` - Photo albums and catalogs
- `Category:Mechanics` - Game mechanics/systems
- `Category:Multi-Tool` - Multi-tool pages
- `Category:Cuboid Room` - Room components
- `Category:Container` - Container items
- `Category:Artifact` (conditional) - Listing/disambiguation pages only

### Individual Page Support
Category lists can now include individual wiki pages:
- **URLs**: `"https://nomanssky.fandom.com/wiki/Warp_Cell"`
- **Page titles**: `"Warp Cell"`
- **Wiki paths**: `"/wiki/Warp_Cell"`

### Category Sets
```python
ALL_CATEGORIES = [...]           # All categories
RAW_MATERIALS = [...]           # Raw materials only
NUTRIENT_PROCESSORS = [...]     # Cooking items only
```

**Usage**: `--categories raw`, `--categories cooking`, `--categories all`

## Item ID Generation

Items use sequential IDs based on their classification groups:
- Format: `{prefix}{number}`
- Prefixes: cook, prod, tech, raw, build, cur, fish, trade, other, nut, ref
- Examples: `cook1`, `cook2`, `prod1`, `tech1`, `raw1`, `build1`
- Counters increment per group independently

### Group Prefixes
- `raw` - Raw Materials
- `prod` - Products
- `tech` - Technology
- `cook` - Cooking
- `build` - Buildings
- `cur` - Curiosities
- `fish` - Fish
- `trade` - Trade
- `ref` - Refinery recipes
- `nut` - Nutrient Processor recipes

## Recipe ID Format

### Refinery Recipes
- Format: `ref_{item_id}_{sequence}`
- Example: `ref_tech1_1`, `ref_tech1_2`, `ref_tech1_3`
- Each recipe for the same output item gets sequential numbering

### Cooking Recipes
- Format: `cook_{item_id}_{sequence}`
- Example: `cook_cook1_1`, `cook_cook1_2`
- Each recipe for the same output item gets sequential numbering

## Missing Ingredient Handling

When ingredients are not found in the main database:
- Use placeholder IDs: `missing_{ingredient_name_lowercase_with_underscores}`
- Examples: `missing_wailing_batter`, `missing_ever_burning_jam`, `missing_bone_cream`
- SQL queries handle these with `COALESCE()` to display readable names

## SQL Query Tools

Located in `sql/` folder with parameterized queries:

### Recipe Table Queries
```bash
# Refinery recipes
sqlite3 nms.db ".param set @item_name 'Warp Cell'" ".read sql/recipe_table.sql"

# Cooking recipes
sqlite3 nms.db ".param set @item_name 'Cake of Burning Dread'" ".read sql/cooking_recipe_table.sql"
```

### Analysis Queries
```bash
# Most valuable items
sqlite3 nms.db ".read sql/item_values.sql"

# Recipes using specific ingredient
sqlite3 nms.db ".read sql/find_recipes_by_ingredient.sql"
```

## Data Export Process

1. Scrape items into SQLite database with comprehensive field extraction
2. Generate unique IDs for cross-referencing
3. Export groups to individual JSON files with all fields
4. Extract recipes with proper ID references and normalized structure

## Example Data

### Item with Value
```json
{
  "id": "tech1",
  "title": "Warp Cell",
  "value": 46750.0,
  "type": "Hyperdrive Charging Unit",
  "infobox": {
    "value": "46,750.0",
    "category": "Consumable",
    "type": "Hyperdrive Charging Unit"
  }
}
```

### Recipe Example
**Database**:
- `refinery_recipes`: `ref_tech1_1` â†’ `tech1` (300s, "Antimatter Bypass")
- `refinery_ingredients`: Carbon (50), Sodium Nitrate (5), Chromatic Metal (250)

**JSON Export**:
```json
{
  "id": "ref_tech1_1",
  "inputs": [
    {"id": "raw1", "name": "Carbon", "quantity": 50},
    {"id": "raw2", "name": "Sodium Nitrate", "quantity": 5},
    {"id": "raw3", "name": "Chromatic Metal", "quantity": 250}
  ],
  "output": {"id": "tech1", "name": "Warp Cell", "quantity": 1},
  "time": "300",
  "operation": "Antimatter Bypass"
}
```